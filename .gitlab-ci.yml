stages:
  - build
  - release
  - deploy
npm:
  stage: build
  image: node:latest
  script:
    - '[ -f package-lock.json ] && rm package-lock.json'
    - npm install --force
  cache:
    key: npm-cache
    paths:
      - node_modules
create-docker-image:
  stage: release
  image: docker:latest
  services:
    - name: docker:dind
  cache:
    key: npm-cache
    paths:
      - node_modules
    policy: pull
  script:
    - docker login localhost:5000 -u root -p P@ssowrd
    - docker build --pull -t nahra-web:main .
    - docker tag nahra-web:main localhost:5000/nahra-web:main
    - docker push localhost:5000/nahra-web:main
deploy:
  stage: deploy
  image: alpine:latest
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login 192.168.1.16:5000 -u root -p P@ssowrd" || true
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop nahra-web" || true
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rm nahra-web" || true
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull  192.168.1.16:5000/nahra-web:main"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --env-file .env.dev --name nahra-web -d -p 3034:3034 192.168.1.16:5000/nahra-web:main" || true
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rmi $(docker images --filter "dangling=true" -q --no-trunc) -f" || true